#!/usr/bin/gawk -f

#  ls -Path Desktop/GPTrees -Attributes Directory -r | Format-Table -Property FullName

BEGIN{

  config()
  read_args()
  read_xls()

  compute()
  make_html()
}

function config() {
  PROCINFO["sorted_in"] = "@ind_str_asc"
  Collist = "c_code|c_coll_by|c_coll_date|c_notes|c_plot|c_tag|"   \
    "m_batang|m_daun|m_fam|m_genus|m_getah|m_macam|m_morpho_code|" \
    "m_notes|m_rb_coll|m_species|p_across|p_along|p_dbh|p_dir|p_direct_det|"  \
    "p_fallen_lvs|p_notes|p_plot|p_same_as_tag|p_tag|p_type"
  Famlist = "ACANT|ACHAR|ACTIN|ALANG|AMARA|ANACA|ANCIS|ANNON|APOCY|AQUIF|ARACE|ARALI|ARAUC|ARECA|ARIST|ASCLE|ASPAR|ASPLE|ASTER|ATHYR|BALAN|BEGON|BIGNO|BISCO|BONNE|BORAG|BORRA|BURMA|BURSE|CALOP|CANNA|CAPPA|CARDI|CASUA|CELAS|CENTR|CHRYS|CLUSI|COMBR|COMME|CONNA|CONVO|CORNA|COSTA|CTENO|CUCUR|CUNON|CYCAD|CYPER|DENNS|DICHA|DILLE|DIOSC|DIPEN|DIPTE|EBENA|EBENE|ELAEO|ERICA|ERYTH|ESCAL|EUPHO|FABAC|FAGAC|FLACO|GENTI|GESNE|GNETA|GOODE|HERNA|HYMEN|HYPER|HYPOX|ICACI|INDET|IRVIN|IXONA|JUGLA|LAMIA|LAURA|LECYT|LEEAC|LILIA|LINAC|LOGAN|LOPHO|LORAN|LYCOP|LYTHR|MAGNO|MALVA|MARAN|MELAS|MELIA|MEMEC|MENIS|MONIM|MORAC|MUSAC|MYRIS|MYRSI|MYRTA|NEPEN|NEPHR|NYCTA|NYMPH|OCHNA|OLACA|OLEAC|OPHIO|OPILI|ORCHI|OXALI|PANDA|PARAC|PASSI|PENTA|PERAC|PHYLL|PIPER|POACE|PODOC|POLYG|POLYP|PRIMU|PTERI|PUTRA|RANUN|RHAMN|RHIZO|ROSAC|RUBIA|RUSCA|RUTAC|SABIA|SALIC|SANTA|SAPIN|SAPOT|SCHIS|SELAG|SIMAR|SMILA|SOLAN|SPHEN|STAPH|STEMO|STERC|STYRA|SYMPL|TACCA|TECTA|TETRA|TETRM|THEAC|THELY|THYME|ULMAC|URTIC|VERBE|VIOLA|VITAC|ZINGI"

  "mktemp -d" | getline TMPDIR
}

function read_args() {
  # Read arguments, check, give usage. Long args to avoid Gawk clash
  
  # for (arg = 1; arg < ARGC; arg++) {
  #   if ((ARGV[arg] ~ /^--/) &&                          \
  #       (ARGV[arg] !~ /^--(plot|coll|morpho|photo)$/))
  #     fail("unrecognized argument: '" ARGV[arg] "'")
  #   else if (ARGV[arg] == "--plot"  ) PLOTFILE   = ARGV[arg+1]
  #   else if (ARGV[arg] == "--coll"  ) COLLFILE   = ARGV[arg+1]
  #   else if (ARGV[arg] == "--morpho") MORPHOFILE = ARGV[arg+1]
  #   else if (ARGV[arg] == "--photo" ) PHOTOFILE  = ARGV[arg+1]
  # }
  # if (!PLOTFILE || !COLLFILE || !MORPHOFILE || !PHOTOFILE ) {
  #   print "Usage: gpreport --plot <file.xls>   \\\n"                    \
  #     "                --coll <file.xls>   \\\n"                             \
  #     "                --morpho <file.xls> \\\n"                           \
  #     "                --photo <file.txt>"  > "/dev/stderr"
  #   exit 1
  # }

  if (ARGC != 2)
    fail("Usage: gpreport <file.xlsx>")
  else
    INFILE = ARGV[1]
}

function read_xls(    i, line, cmd) {
  # read first 4 sheets
  for (i = 1; i <= 4; i++) {
    line = 0
    cmd = "xlsx2csv -s " i " " INFILE
    while ((cmd | getline) > 0)
      S[i][++line] = $0
    close(cmd)

    switch (S[i][1]) {
      case /fallen_lvs/  : x["p"] = i ; break
      case /batang/      : x["m"] = i ; break
      case /coll_date/   : x["c"] = i ; break
      case /powershell/  : x["f"] = i ; break
      default            :
        fail("sheet " i " is not one of: plots, colls, morpho or photos")
    }
  }
  
  # test
  if (length(x) != 4)
    fail("not all 4 sheets found")

  # for (i in S)
  #   for (j in S[i])
  #     print i, j, S[i][j]

  read_csv(S[x["p"]], "p")
  read_csv(S[x["m"]], "m")
  read_csv(S[x["c"]], "c")

  validate()

  read_photo(S[x["f"]])
}

function read_csv(sheet, prefix,   l,f,nf,fname,field) {

  FPAT = "([^,]*)|(\"[^\"]+\")"
  for (l = 1; l <= length(sheet); l++) {
    nf = patsplit(sheet[l], field)
    # headers
    if (l == 1)
      for (f = 1; f <= nf; f++)
        fname[f] = clean(field[f])
    # data
    else
      for (f = 1; f <= nf; f++)
        D[(prefix "_" fname[f])][l-1] = clean(field[f])
  }
}

function validate(   i, collist, m, t, c, f, famlist) {
  
  # All xls files: test for all columns present once only
  split(Famlist, famlist, "|")
  for (i in famlist)
    Fams[famlist[i]] = 1
  split(Collist, collist, "|")
  for (i in D)
    if (i != collist[++j])
      fail("ERROR: error in column list at '" i "'")
  
  # Morpho
  for (i in D["m_morpho_code"]) {
    m = toupper(D["m_morpho_code"][i])
    f = toupper(D["m_fam"][i])
    
    # transfer, and test: duplicate morpho 
    if (++Morphos[m] > 1)
      err("Morpho: morpho '" m "' is a duplicate.")
  
    # test for format
    if (m !~ /^[0-9A-Z]{8}$/)
      err("Morpho: morpho '" m "' is not 8 chars.")

    # test for fam format
    if (!Fams[f]) {
      err("Morpho: morpho '" m "', fam '" f "' not in allowed family codes.")
      delete Fams[f]
    }
    else
      Fam[m] = f

    Gen[m] = D["m_genus"][i]
    Spec[m] = D["m_species"][i]
  }
  
  # Plots
  for (i in D["p_plot"]) {
    
    
    # transfer
    t = toupper(D["p_plot"][i]) "-" D["p_tag"][i]
    Porder[i] = t
    Plot[t] = toupper(D["p_plot"][i])
    Dd[t] = D["p_direct_det"][i]
    Sa[t] = D["p_same_as_tag"][i]
    Lf[t] = D["p_fallen_lvs"][i]
    Dbh[t] = D["p_dbh"][i]
    Hab[t] = D["p_type"][i]
    
    # test for t format
    if (t !~ /^[A-Z]{2}[0-9]{1,3}-[0-9]+$/)
      err("Plots: tree '" t "' is the wrong format.")
    
    # test for duplicates
    if (++Trees[t] > 1)
      err("Plots: tree '" t "' is a duplicate.")
  
    # test: only one of three det options allowed
    if ((Dd[t] && Sa[t]) || (Dd[t] && Lf[t]) || (Lf[t] && Sa[t]))
      err("Plots: tree '" t "' has more than just one kind of det.")
    
    # test for formats in det columns
    if (Dd[t])
      if (Dd[t] !~ /^[0-9A-Z]{8}$/)
        err("Plots: tree '" t "', direct_det '" Dd[t] "' is not an 8-char morphotype.")
    if (Sa[t])
      if (Sa[t] !~ /^[0-9]+$/)
        err("Plots: tree '" t "', same_as_tag '" Sa[t] "' is not an integer.")
    if (Lf[t])
      if (Lf[t] !~ /^dapat$/)
        err("Plots: tree '" t "', fallen_lvs '" Lf[t] "' is not 'dapat'.")
    
    # test: does the direct det morpho exist in morpho?
    if (Dd[t])
      if (!Morphos[Dd[t]]) {
        err("Plots: tree '" t "', direct_det '" Dd[t]   \
            "' is not in Morpho spreadsheet.")
        delete Morphos[Dd[t]]
      }

    # test: is the same_as referring to self?
    if (Sa[t])
      if (Sa[t] == D["p_tag"][i])
        err("Plots: tree '" t "', same_as_tag '" Sa[t] "' refers to self.")

    # type of det
    if (Lf[t])
      Dtype[t] = "fallen_lvs"
    else if (Dd[t])
      Dtype[t] = "direct"
    else if (Sa[t])
      Dtype[t] = "same_as"
    
    # check for any activity in plot
    if (Dd[t] || Sa[t] || Lf[t])
      Active[D["p_plot"][i]] = 1

  }

  # Colls
  for (i in D["c_code"]) {
    c = D["c_code"][i]
    Ct[c] = toupper(D["c_plot"][i]) "-" D["c_tag"][i]
    
    # test for c format
    if (c !~ /^[A-Za-z]{2}[-_][0-9]+$/)
      err("Colls: coll '" c "' is the wrong format.")

    # test for duplicates
    if (++Colls[c] > 1)
      err("Colls: coll '" c "' is a duplicate.")

    # test for date format
    if (D["c_coll_date"][i] !~ /^2022-0[1-9]-[123][0-9]$/)
      err("Colls: coll '" c "', date '" D["c_coll_date"][i] "' bad format.")
    
    # test for Ct
    if (!Trees[Ct[c]])
      err("Colls: tree/tag '" Ct[c] "' is not in Plots spreadsheet.")

  }

    
  # for (i in Morpho)
  #   print i
  # for (i in Id)
  #   print i, Id[i]
  # for (i in Active)
  #   print i " is active"
}

function read_photo(sheet,  l, x, famtest, nf, i) {

  # preread to find fam/morpho/tree
  for (l = 2; l <= length(sheet); l++) {
    nf = split(sheet[l], x, "\\")
    if (nf >= 3)
      for (i = 1; i <= nf ; i++)
        if ((toupper(x[i]) ~ /^[A-Z]{5}$/) &&       \
            (toupper(x[i+1]) ~ /^[A-Z0-9]{8}$/))
          famf = i
  }
  
  # skip header
  for (l = 2; l <= length(sheet); l++) {
    # only parse lines with a tree
    if (split(sheet[l], x, "\\") == famf+2) {
      # does the morpho exist?
      if (!Morphos[x[famf+1]]) {
        err("Photos: tree '" x[famf+2] "', morpho '"x[famf+1]   \
            "' is not in morpho spreadsheet.")
        delete Morpho[x[famf+2]]
      }
      else
        famtest[x[famf+1]] = famtest[x[famf+1]] " " x[famf]

      # Is the fam field an allowed fam
      if (!Fams[x[famf]]) {
        err("Photos: family '" x[famf] "' is not an allowd family.")
        delete Fams[x[famf]]
      }
      
      # Is the fam the same as in morpho?
      if (x[famf] != Fam[x[famf+1]]) 
        err("Photos: morpho '" x[famf+1] "', family '" x[famf]  \
            "' != fam in Morpho: '" Fam[x[famf+1]] "'.")
            
      # Does the tree exist?
      if (!Trees[x[famf+2]]) {
        err("Photos: tree '"x[famf+2] "' is not in plot spreadsheet.")
        delete Trees[x[famf+2]]
      }

      # has it been classed as photo to morpho?
      if (!Lf[x[famf+2]])
        err("Photos: tree '"x[famf+2] "' is not 'dapat' in plot spreadsheet.")
        
      # if both exists
      if (Morphos[x[famf+1]] && Trees[x[famf+2]]) {
        P2m[x[famf+2]] = x[famf+1]
        # store list of morphos in the photo sheet
        Pmorphos[x[famf+1]] = 1
      }
    }
  }

  # Check all dapat are in 
  for (i in Trees)
    if (Lf[i])
      if (!P2m[i]) {
        err("Plots: tree '" i "' says 'fallen_lf' but there is no photo.")
        delete P2m[i]
      }
  
  # test for occurrence of morpho in two or more fams
  for (i in famtest)
    if (length(famtest[i]) > 6)
      err("Morpho '" i "' in photo list is in >1 family:" famtest[i] ".")
}

function compute() {
  for (i in Trees) {
    # fallen leaf det overrides
    if (P2m[i])
      Morpho[i] = P2m[i]
    # direct next
    else if (Dd[i]) {
      if (!Pmorphos[Dd[i]])
        err("Plots: tree '" i "', direct_det '" Dd[i]               \
            "': morpho not allowed as direct_det, no fallen_lvs.")
      else
        Morpho[i] = Dd[i]
    }
    if (!P2m[i])
      # need to delete, because length(P2m) used
      delete P2m[i]
  }

  # rerun for Same as once dets given 
  for (i in Trees)
    if (Sa[i]) {
      # TODO make this check not just morpho, but either Ddet or photo
      if (Morpho[Plot[i] "-" Sa[i]])
        Morpho[i] = Morpho[Plot[i] "-" Sa[i]]
      else
        err("Plots: tree '" i "', same_as_tag '" Sa[i]  \
           "' refers to plant without morpho.")
    }

  for (i in Colls) {
    Cdet[i] = Morpho[Ct[i]]
    Mcoll[Morpho[Ct[i]]] = 1
  }
}

# make a single html page with sections, easy to navigate with links

# -- HTML FUNCTIONS --------------------------------------------------------

function make_html() {

  header()
  
  print "<h1>GP Dets Project 2022: progress report</h1>"
  print "<p><i>Run at " strftime("%Y-%m-%d %H:%M %Z") ".</i></p>"

  # Contents
  print "<p><b>Contents</b>: "                                                 \
    ((Err) ? "<a href=\"#errors\">Errors</a> | " : "")                  \
    "<a href=\"#summary\">Summary</a> | "                               \
    "<a href=\"#morpho\">Morpho</a> | "                                 \
    "<a href=\"#colls\">Collections</a> | "                             \
    "<a href=\"#plots\">Plots</a> | "                                      \
    "<a href=\"#hitlist\">Hitlist</a>"                                  \
    "</p>"

  if (Err)
    html_err()

  print "<h2>Summary</h2><a name=\"summary\"></a>"
  print "<table>"
  print "<tr><td>Total trees in 'plots' spreadsheet:</td>"          \
    "<td style=\"text-align: right;\">" length(Trees) "</td></tr>"
  print "<tr><td>Total morphos in 'morpho' spreadsheet:</td>"   \
    "<td style=\"text-align: right;\">" length(Morphos) "</td></tr>"
  print "<tr><td>Total trees with fallen leaf morphos:</td>"\
    "<td style=\"text-align: right;\">" length(P2m) "</td></tr>"
  print "<tr><td>Number of plots that have any dets:</td>"\
    "<td style=\"text-align: right;\">" length(Active) "</td></tr>"
  print "</table>"

  # Morpho
  print "<h2>Morphotypes</h2><a name=\"morpho\"></a>"
  print "<table>"
  print "<tr><th>Morpho</th><th>Family</th><th>Genus</th><th>Species</th><th>Collected</th></tr>"
  for (i in Morphos)
    print "<tr><td><a name=\"m_" i "\"></a>" i  "</td>"    \
      "<td>" Fam[i] "</td>"                                \
      "<td>" Gen[i] "</td>"                                \
      "<td>" Spec[i] "</td>"                                \
      "<td>" ((Mcoll[i]) ? "sudah" : "") "</td></tr>"
  print "</table>"

  # Colls
  print "<h2>Collections</h2><a name=\"colls\"></a>"
  print "<table>"
  print "<tr><th>Coll code</th><th>Plant</th><th>Morpho</th></tr>"
  for (i in Colls)
    print "<tr><td>" i  "</td>"                 \
      "<td>" Ct[i] "</td>"                      \
      "<td>" Morpho[Ct[i]] "</td></tr>"
  print "</table>"

  # Plots
  print "<h2>Plots (active only)</h2><a name=\"plots\"></a>"
  print "<table>"
  print "<tr><th>Plant</th><th>Type</th><th>DBH</th><th>Det type</th><th>Morpho</th></tr>"
  PROCINFO["sorted_in"] = "@ind_num_asc"
  for (j in Porder) {
    i = Porder[j]
    if (Active[Plot[i]])
      print "<tr><td><a name=\"p_" i "\"></a>" i  "</td>"        \
        "<td>" Hab[i] "</td>"                   \
        "<td style=\"text-align: right;\">" sprintf("%.1f",Dbh[i]) "</td>"      \
        "<td>" Dtype[i] "</td>"                    \
        "<td><a href=\"#m_" Morpho[i] "\">" Morpho[i] "</a></td></tr>"            }       
  print "</table>"

  # Hitlists
  print "<h2>Hitlist for collecting morphos</h2><a name=\"hitlist\"></a>"
  print "<table>"
  print "<tr><th>Morpho</th><th>Possible individuals (DBH)</th></tr>"
  PROCINFO["sorted_in"] = "@ind_str_asc"
  for (i in Morphos)
    if (!Mcoll[i]) {
      print "<tr><td>" i " :</td><td>"
      for (j in Trees)
        if (Morpho[j] == i)
          print "<a href=\"#p_" j "\">" j "</a> (" Dbh[j] "), "
      print "</td></tr>"
    }
  print "</table>"

  footer()
}

function header() {
  # version history: [chars app] -> [tcm] -> [phyedit] -> here
  
  # Use html5
  # print "Content-type: text/html\n"
  print "<!DOCTYPE html>"
  print "<html xmlns=\"http://www.w3.org/1999/xhtml\">"
  print "<head><title>GP dets (run " strftime("%Y-%m-%d %H:%M %Z") ")</title>"
  print "<meta http-equiv=\"Content-Type\" content=\"text/html; \
           charset=utf-8\" />"
  print "<style>"
  print "body { font-size: 14px; font-family: " \
    "Verdana, Arial, Helvetica, sans-serif; }"
  print ".main {max-width: 1200px; padding-top: 30px; margin-left: auto;" \
    "  margin-right: auto; }"
  print "table { font-family: monospace; border-collapse: collapse; }"
  print "th, td { text-align: left; padding-left:10px; padding-right:10px;border: solid 1px;}"
  print "a { color:#15358d; text-decoration:none; border-bottom-style:none }"
  print "a:visited { color:#9f1dbc }"
  print "a:hover {color:#15358d; border-bottom-style:solid; "\
    "border-bottom-width:thin }"
  print "</style>"
  print "</head>\n<body>"
  print "<div class=\"main\">"
}

function footer() {
  print "</div>"
  print "</body>\n</html>";
}

function html_err(   e, i) {
  
  print "<h2>Errors</h2><a name=\"errors\"></a>"
  print "<ul>"
  for (i = 1; i < split(Err, e, "\n"); i++)
    print "<li>" e[i] "</li>"
  print "</ul>"

}

# -- HELPER FUNCTIONS ------------------------------------------------------

function err(msg) {
  Err = Err msg "\n"
}

function fail(msg) {
  print "ERROR: " msg > "/dev/stderr"
  exit 1
}

function clean(t) {
  gsub(/^"/,"",t)
  gsub(/"$/,"",t)
  gsub(/""/,"\"",t)
  gsub(/^ +/,"",t)
  gsub(/ +$/,"",t)
  gsub(/\|/,"{PIPE}",t)
  return t
}

